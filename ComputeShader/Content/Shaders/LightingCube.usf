const int MAX_STEPS = 500;
const float MIN_DIST = 0.01;
const float MAX_DIST = 100000.0;

const float3 gDefaultCol = float3(0.0,0.0,0.0);
const float gShadowSoftness = 15.0;

struct Object
{
    // Rotation matrix
    float3x3 Rotation(const in float3 rotation) 
    {
        float cx = cos(rotation.x);
        float sx = sin(rotation.x);
        float cy = cos(rotation.y);
        float sy = sin(rotation.y);
        float cz = cos(rotation.z);
        float sz = sin(rotation.z);
        return mul(
            float3x3(
                float3(cz, -sz, 0),
                float3(sz, cz, 0),
                float3(0, 0, 1)),
            mul(
            float3x3(
                float3(cy, 0, -sy),
                float3(0, 1, 0),
                float3(sy, 0, cy)),
            float3x3(
                float3(1, 0, 0),
                float3(0, cx, sx),
                float3(0, -sx, cx))));
    }

    float GetDist(const in float3 newPos, const in float3 cubeOrig, const in float cubeRad, const in float3x3 rot)
    {
        float3 potition = mul((newPos - cubeOrig), rot);
        return min(MAX_DIST, length(max(abs(potition) - cubeRad, 0.0)));
    }
    float3 GetNormal(const in float3 newPos, const in float3 cubeOrig, const in float cubeRad, const in float3x3 rot)
    {
        float dist = GetDist(newPos, cubeOrig, cubeRad, rot);
        float2 add = float2(0.01,0.0);
        
        float3 normal = 
            float3(
            GetDist(newPos + add.xyy, cubeOrig, cubeRad, rot),
            GetDist(newPos + add.yxy, cubeOrig, cubeRad, rot),
            GetDist(newPos + add.yyx, cubeOrig, cubeRad, rot))
                -
            float3(
            GetDist(newPos - add.xyy, cubeOrig, cubeRad, rot),
            GetDist(newPos - add.yxy, cubeOrig, cubeRad, rot),
            GetDist(newPos - add.yyx, cubeOrig, cubeRad, rot));
        return normalize(normal);
    }
};

struct MarchInfo
{
    float3 lastPos;
    float dist;
    float lastDist;
    int steps;
};

struct Marcher
{
    //Lighting based on: http://www.project-asura.com/program/d3d11/d3d11_006.html
    float3 Specular(const in float3 specularColor, const in float3 viewDir, const in float3 normal, const in float3 lightDir, const in float shinyness)
    {        
        float3 reflected = -viewDir + (2.0f * dot( normal, viewDir ) * normal);
        return specularColor * pow( max ( dot( lightDir, reflected), 0.0f ), shinyness ) * ((shinyness + 1.0f)/ (2.0 * 3.1416));
    }
    float3 Diffuse(const in float3 diffuseColor, const in float3 normal, const in float3 lightDir)
    {        
        return diffuseColor * dot(normal, lightDir);
    }
    float4 GetLighting(const in float3 viewPos, const in float3 viewDir, const in MarchInfo march, const in float3 lightOrigin, 
        out float3 lightDir, const in float lightStrength, const in float3 cubeOrig, const in float3 diffuseColor,
        const in float3 specularColor, const in float3 lightColor, const in float3 ambientColor, out float3 normal, 
        const in float cubeRad, const in float shinyness, const in float fogMultiplier, const in float3 cubeRotation)
    {   
        Object obj;
        float3x3 rotMatrix = obj.Rotation(cubeRotation);
        normal = obj.GetNormal(march.lastPos, cubeOrig, cubeRad, rotMatrix);

        //Lighting
        lightDir = lightOrigin - march.lastPos;
        float lightLength = length(lightDir);
        lightDir = lightDir / lightLength;
        lightLength = max(lightStrength * lightLength / 100.0f, 0.0f);

        float3 col = Specular(specularColor, viewDir, normal, lightDir, shinyness) + Diffuse(diffuseColor, normal, lightDir) + ambientColor;

        //Check dist  
        if(MIN_DIST >= march.lastDist)
        {
            return float4(saturate(col), 1.0);
        }
        return (float4)0.0;
    }
};

//Lighting
Marcher marcher;
MarchInfo march;
march.lastPos = lastPos;
march.dist = distance;
march.lastDist = lastDist;
march.steps = steps;

return marcher.GetLighting(rayPos, -rayDirection, march, 
    lightOrigin, lightDir, lightStrength, cubeOrig, diffuseColor, 
    specularColor, lightColor, ambientColor, normal, cubeRad, 
    shinyness, fogMultiplier, cubeRotation);