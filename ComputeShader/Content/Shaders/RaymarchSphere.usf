const int MAX_STEPS = 500;
const float MAX_DIST = 100000.0;
const float MIN_DIST = 0.001;

const float3 gDefaultCol = float3(0.0,0.0,0.0);
const float gShinyness = 2.0;
const float gShadowSoftness = 15.0;
const float gFogMultiplier = 1.5;

struct Object
{
    float GetDist(const in float3 newPos, const in float3 sphereOrig, const in float sphereRad)
    {
        float3 direction = newPos - sphereOrig;
        return min(MAX_DIST, max(length(direction) - sphereRad, 0.0));
    }
};

struct MarchInfo
{
    float3 lastPos;
    float dist;
    float lastDist;
    int steps;
};

struct Marcher
{
    void RayMarch(out MarchInfo march, const in float3 rayOrigin, 
        const in float3 rayDirection, const in float3 sphereOrig, 
        const in float sphereRad)
    {
        Object obj;

        for(march.steps = 0; march.steps < MAX_STEPS; march.steps++)
        {
            march.lastPos = rayOrigin + rayDirection * march.dist;

            march.lastDist = obj.GetDist(march.lastPos, sphereOrig, sphereRad);

            if(MIN_DIST > abs(march.lastDist)) 
            {
                break;
            }
            if(MAX_DIST < march.dist)
            {
                break;
            }

            march.dist += march.lastDist;
        }
    }
};

//March
MarchInfo march;
Marcher marcher;
marcher.RayMarch(march, rayOrigin, rayDirection, sphereOrig, sphereRad);

dist = march.dist;
lastDist = march.lastDist;
steps = march.steps;
return march.lastPos;