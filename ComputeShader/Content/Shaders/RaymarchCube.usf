const int MAX_STEPS = 500;
const float MAX_DIST = 100000.0;
const float MIN_DIST = 0.001;

const float3 gDefaultCol = float3(0.0,0.0,0.0);
const float gShinyness = 2.0;
const float gShadowSoftness = 15.0;
const float gFogMultiplier = 1.5;

struct Object
{
    // Rotation matrix
    float3x3 Rotation(const in float3 rotation) 
    {
        float cx = cos(rotation.x);
        float sx = sin(rotation.x);
        float cy = cos(rotation.y);
        float sy = sin(rotation.y);
        float cz = cos(rotation.z);
        float sz = sin(rotation.z);
        return mul(
            float3x3(
                float3(cz, -sz, 0),
                float3(sz, cz, 0),
                float3(0, 0, 1)),
            mul(
            float3x3(
                float3(cy, 0, -sy),
                float3(0, 1, 0),
                float3(sy, 0, cy)),
            float3x3(
                float3(1, 0, 0),
                float3(0, cx, sx),
                float3(0, -sx, cx))));
    }

    float GetDist(const in float3 newPos, const in float3 cubeOrig, const in float cubeRad, const in float3x3 rot)
    {
        float3 potition = mul((newPos - cubeOrig), rot);
        return min(MAX_DIST, length(max(abs(potition) - cubeRad, 0.0)));
    }
};

struct MarchInfo
{
    float3 lastPos;
    float dist;
    float lastDist;
    int steps;
};

struct Marcher
{
    void RayMarch(out MarchInfo march, const in float3 rayOrigin, 
        const in float3 rayDirection, const in float3 cubeOrig, 
        const in float3 cubeRotation, const in float cubeRad)
    {
        Object obj;
        float3x3 rotMatrix = obj.Rotation(cubeRotation);

        for(march.steps = 0; march.steps < MAX_STEPS; march.steps++)
        {
            march.lastPos = rayOrigin + rayDirection * march.dist;

            march.lastDist = obj.GetDist(march.lastPos, cubeOrig, cubeRad, rotMatrix);

            if(MIN_DIST > abs(march.lastDist)) 
            {
                break;
            }
            if(MAX_DIST < march.dist)
            {
                break;
            }

            march.dist += march.lastDist;
        }
    }
};

//March
MarchInfo march;
Marcher marcher;
marcher.RayMarch(march, rayOrigin, rayDirection, cubeOrigin, cubeRotation, cubeRadius);

dist = march.dist;
lastDist = march.lastDist;
steps = march.steps;
return march.lastPos;